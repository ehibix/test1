{"version":3,"sources":["candy-machine.ts","connection.tsx","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","collectionPDA","collectionPDAAccount","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txnEstimate","initInstructions","splice","initSigners","sendTransactions","txs","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","number","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettingType","toDate","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","useWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","cndy","active","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","document","getElementById","click","connected","mintTxId","txTimeout","remaining","msg","code","window","location","reload","indexOf","toggleMintButton","now","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","getCandyMachineId","network","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.354c4c46.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<(string | undefined)[]> => {\n  const mint = anchor.web3.Keypair.generate();\n\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix: anchor.web3.TransactionInstruction[][] = [];\n  const signersMatrix: anchor.web3.Keypair[][] = [];\n\n  const state = candyMachine.state;\n  const txnEstimate =\n    892 +\n    (collectionPDAAccount && state.retainAuthority ? 132 : 0) +\n    (state.tokenMint ? 145 : 0) +\n    (state.whitelistMintSettings ? 33 : 0) +\n    (state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n    (state.gatekeeper ? 33 : 0) +\n    (state.gatekeeper?.expireOnUse ? 66 : 0);\n\n  const INIT_INSTRUCTIONS_LENGTH = 4;\n  const INIT_SIGNERS_LENGTH = 1;\n\n  console.log('Transaction estimate: ', txnEstimate);\n  if (txnEstimate > 1230) {\n    const initInstructions = instructions.splice(0, INIT_INSTRUCTIONS_LENGTH);\n    console.log(initInstructions);\n    instructionsMatrix.push(initInstructions);\n    const initSigners = signers.splice(0, INIT_SIGNERS_LENGTH);\n    signersMatrix.push(initSigners);\n  }\n\n  instructionsMatrix.push(instructions);\n  signersMatrix.push(signers);\n\n  if (cleanupInstructions.length > 0) {\n    instructionsMatrix.push(cleanupInstructions);\n    signersMatrix.push([]);\n  }\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from '@solana/web3.js';\n\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string,\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, 'max');\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach(log => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][],\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  let toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          'single',\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          'single',\n        );\n        ids = ids.concat(txs.map(t => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      'Died on ',\n      stopPoint,\n      'retrying from instruction',\n      instructions[stopPoint],\n      'instructions length is',\n      instructions.length,\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = 'singleGossip',\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = [];\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  let breakEarlyObject = { breakEarly: false, i: 0 };\n  console.log(\n    'Signed txns length',\n    signedTxns.length,\n    'vs handed in length',\n    instructionSet.length,\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    signedTxnPromise\n      .then(({ txid, slot }) => {\n        successCallback(txid, i);\n      })\n      .catch(reason => {\n        // @ts-ignore\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          breakEarlyObject.breakEarly = true;\n          breakEarlyObject.i = i;\n        }\n      });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise;\n      } catch (e) {\n        console.log('Caught failure', e);\n        if (breakEarlyObject.breakEarly) {\n          console.log('Died on ', breakEarlyObject.i);\n          // Return the txn we failed on by index\n          return {\n            number: breakEarlyObject.i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    await Promise.all(pendingTxns);\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void,\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach(instruction => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map(s => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map(s => s.publicKey),\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      'recent',\n      true,\n    );\n\n    if (!confirmation)\n      throw new Error('Timed out awaiting confirmation on transaction');\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error('Transaction failed: Custom instruction error');\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error('Timeout Error caught', err);\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = 'recent',\n  queryStatus = false,\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        commitment,\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId])\n    connection.removeSignatureListener(subId);\n  done = true;\n  console.log('Returning status', status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import { Paper } from '@material-ui/core';\nimport Countdown from 'react-countdown';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      padding: theme.spacing(0),\n      '& > *': {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'center',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: '#384457',\n        color: 'white',\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: 'flex',\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: 'column',\n      alignContent: 'center',\n      alignItems: 'center',\n      justifyContent: 'center',\n      background: '#384457',\n      color: 'white',\n      borderRadius: 5,\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: 'bold',\n      fontSize: 18,\n    },\n  }),\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState } from 'react';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  isActive: boolean;\n}) => {\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [clicked, setClicked] = useState(false);\n\n  useEffect(() => {\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n      onMint();\n      setClicked(false);\n    }\n  }, [gatewayStatus, clicked, setClicked, onMint]);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    } else if (clicked && candyMachine?.state.gatekeeper) {\n      return <CircularProgress />;\n    }\n\n    return 'MINT';\n  };\n\n  return (\n    <CTAButton\n      disabled={clicked || isMinting || !isActive}\n      onClick={async () => {\n        setClicked(true);\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\n            setClicked(true);\n          } else {\n            await requestGatewayToken();\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n","import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n      } catch (e) {\n        console.log('There was a problem fetching Candy Machine state');\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection]);\n\n  const onMint = async () => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        const mintTxId = (\n          await mintOneToken(candyMachine, wallet.publicKey)\n        )[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction Timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the lastest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    onMint={onMint}\n                    isActive={isActive || (isPresale && isWhitelistUser)}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import './App.css';\nimport { useMemo } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport Home from './Home';\n\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from '@solana/wallet-adapter-wallets';\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from '@solana/wallet-adapter-react';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\n\nimport { ThemeProvider, createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    const candyMachineId = new anchor.web3.PublicKey(\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\n    );\n\n    return candyMachineId;\n  } catch (e) {\n    console.log('Failed to construct CandyMachineId', e);\n    return undefined;\n  }\n};\n\nconst candyMachineId = getCandyMachineId();\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\n);\n\nconst txTimeoutInMilliseconds = 30000;\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={txTimeoutInMilliseconds}\n              rpcHost={rpcHost}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"],"sourceRoot":""}